openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/auth/register:
    post:
      summary: 'Register a User.'
      operationId: registerAUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User successfully registered'
                  user:
                    name: Test
                    email: test1@test.com
                    updated_at: '2023-06-15T12:04:26.000000Z'
                    created_at: '2023-06-15T12:04:26.000000Z'
                    id: 2
                properties:
                  message:
                    type: string
                    example: 'User successfully registered'
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Test
                      email:
                        type: string
                        example: test1@test.com
                      updated_at:
                        type: string
                        example: '2023-06-15T12:04:26.000000Z'
                      created_at:
                        type: string
                        example: '2023-06-15T12:04:26.000000Z'
                      id:
                        type: integer
                        example: 2
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be between 2 and 100 characters.'
                  example: crr
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 100 characters.'
                  example: wuckert.virgil@example.net
                password:
                  type: string
                  description: 'Must be at least 4 characters.'
                  example: '67u"_Kjod]#KCY@vB|'
              required:
                - name
                - email
                - password
      security: []
  /api/auth/login:
    post:
      summary: 'Get a JWT via given credentials.'
      operationId: getAJWTViaGivenCredentials
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  access_token: eyJ0eXA...
                  token_type: Bearer
                  expires_in: '2023-06-15T12:39:21.898199Z'
                  user:
                    id: 1
                    name: Test
                    email: test@test.com
                    total_amount: '10000000.00'
                    created_at: null
                    updated_at: null
                properties:
                  access_token:
                    type: string
                    example: eyJ0eXA...
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: string
                    example: '2023-06-15T12:39:21.898199Z'
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Test
                      email:
                        type: string
                        example: test@test.com
                      total_amount:
                        type: string
                        example: '10000000.00'
                      created_at:
                        type: string
                        example: null
                      updated_at:
                        type: string
                        example: null
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: dorothy.mayer@example.com
                password:
                  type: string
                  description: 'Must be at least 4 characters.'
                  example: aUW=vL0co2I_lsE
              required:
                - email
                - password
      security: []
  /api/auth/logout:
    get:
      summary: 'Log the user out.'
      operationId: logTheUserOut
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"User successfully signed out\",\n}"
      tags:
        - Authentication
      security: []
  /api/auth/refresh:
    get:
      summary: 'Refresh a token.'
      operationId: refreshAToken
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  access_token: eyJ0eXA...
                  token_type: Bearer
                  expires_in: '2023-06-15T12:39:21.898199Z'
                  user:
                    id: 1
                    name: Test
                    email: test@test.com
                    total_amount: '10000000.00'
                    created_at: null
                    updated_at: null
                properties:
                  access_token:
                    type: string
                    example: eyJ0eXA...
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: string
                    example: '2023-06-15T12:39:21.898199Z'
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Test
                      email:
                        type: string
                        example: test@test.com
                      total_amount:
                        type: string
                        example: '10000000.00'
                      created_at:
                        type: string
                        example: null
                      updated_at:
                        type: string
                        example: null
      tags:
        - Authentication
      security: []
  /api/auth/user-profile:
    get:
      summary: 'Get the authenticated User.'
      operationId: getTheAuthenticatedUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: Test
                  email: test@test.com
                  total_amount: '10000000.00'
                  created_at: null
                  updated_at: null
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Test
                  email:
                    type: string
                    example: test@test.com
                  total_amount:
                    type: string
                    example: '10000000.00'
                  created_at:
                    type: string
                    example: null
                  updated_at:
                    type: string
                    example: null
      tags:
        - Authentication
      security: []
  /api/categories:
    get:
      summary: 'Get all categories with pagination'
      operationId: getAllCategoriesWithPagination
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  current_page: 1
                  data:
                    -
                      id: 1
                      name: Food
                      created_at: null
                      updated_at: null
                    -
                      id: 2
                      name: 'Household items'
                      created_at: null
                      updated_at: null
                  first_page_url: 'http://devot.test/api/categories?page=1'
                  from: 1
                  last_page: 4
                  last_page_url: 'http://devot.test/api/categories?page=4'
                  links:
                    -
                      url: null
                      label: '&laquo; Previous'
                      active: false
                    -
                      url: 'http://devot.test/api/categories?page=1'
                      label: '1'
                      active: true
                    -
                      url: 'http://devot.test/api/categories?page=2'
                      label: '2'
                      active: false
                    -
                      url: 'http://devot.test/api/categories?page=3'
                      label: '3'
                      active: false
                    -
                      url: 'http://devot.test/api/categories?page=4'
                      label: '4'
                      active: false
                    -
                      url: 'http://devot.test/api/categories?page=2'
                      label: 'Next &raquo;'
                      active: false
                  next_page_url: 'http://devot.test/api/categories?page=2'
                  path: 'http://devot.test/api/categories'
                  per_page: 2
                  prev_page_url: null
                  to: 2
                  total: 7
                properties:
                  current_page:
                    type: integer
                    example: 1
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: Food
                        created_at: null
                        updated_at: null
                      -
                        id: 2
                        name: 'Household items'
                        created_at: null
                        updated_at: null
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Food
                        created_at:
                          type: string
                          example: null
                        updated_at:
                          type: string
                          example: null
                  first_page_url:
                    type: string
                    example: 'http://devot.test/api/categories?page=1'
                  from:
                    type: integer
                    example: 1
                  last_page:
                    type: integer
                    example: 4
                  last_page_url:
                    type: string
                    example: 'http://devot.test/api/categories?page=4'
                  links:
                    type: array
                    example:
                      -
                        url: null
                        label: '&laquo; Previous'
                        active: false
                      -
                        url: 'http://devot.test/api/categories?page=1'
                        label: '1'
                        active: true
                      -
                        url: 'http://devot.test/api/categories?page=2'
                        label: '2'
                        active: false
                      -
                        url: 'http://devot.test/api/categories?page=3'
                        label: '3'
                        active: false
                      -
                        url: 'http://devot.test/api/categories?page=4'
                        label: '4'
                        active: false
                      -
                        url: 'http://devot.test/api/categories?page=2'
                        label: 'Next &raquo;'
                        active: false
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          example: null
                        label:
                          type: string
                          example: '&laquo; Previous'
                        active:
                          type: boolean
                          example: false
                  next_page_url:
                    type: string
                    example: 'http://devot.test/api/categories?page=2'
                  path:
                    type: string
                    example: 'http://devot.test/api/categories'
                  per_page:
                    type: integer
                    example: 2
                  prev_page_url:
                    type: string
                    example: null
                  to:
                    type: integer
                    example: 2
                  total:
                    type: integer
                    example: 7
      tags:
        - 'Category CRUD'
      security: []
    post:
      summary: 'Store new category.'
      operationId: storeNewCategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Category successfully stored.\",\n}"
      tags:
        - 'Category CRUD'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must be at least 4 characters.'
                  example: flnmtel
              required:
                - name
      security: []
  '/api/categories/{id}':
    get:
      summary: 'Show single category.'
      operationId: showSingleCategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: Food
                  created_at: null
                  updated_at: null
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Food
                  created_at:
                    type: string
                    example: null
                  updated_at:
                    type: string
                    example: null
      tags:
        - 'Category CRUD'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  description: ''
                  example: aspernatur
              required:
                - category
      security: []
    put:
      summary: 'Update a category.'
      operationId: updateACategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Category successfully updated.\",\n}"
      tags:
        - 'Category CRUD'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  description: ''
                  example: quia
                name:
                  type: string
                  description: 'Must be at least 4 characters.'
                  example: okgwaqcijagceanyqxqlomxpejjybvvhsulrhgildc
              required:
                - category
                - name
      security: []
    delete:
      summary: 'Delete a category.'
      operationId: deleteACategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Category successfully deleted.\",\n}"
      tags:
        - 'Category CRUD'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  description: ''
                  example: sed
              required:
                - category
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the category.'
        example: omnis
        required: true
        schema:
          type: string
  '/api/{fallbackPlaceholder}':
    get:
      summary: ''
      operationId: getApiFallbackPlaceholder
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Route not found.'
                properties:
                  message:
                    type: string
                    example: 'Route not found.'
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: fallbackPlaceholder
        description: ''
        example: v~Z
        required: true
        schema:
          type: string
  /api/expenses:
    get:
      summary: 'Get all expenses with pagination'
      operationId: getAllExpensesWithPagination
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  current_page: 1
                  data:
                    -
                      id: 1
                      user_id: 1
                      category_id: 1
                      description: 'Test description...'
                      amount: '196.00'
                      created_at: '2023-06-15T12:03:40.000000Z'
                      updated_at: null
                    -
                      id: 2
                      user_id: 1
                      category_id: 2
                      description: 'Test description...'
                      amount: '4893.00'
                      created_at: '2023-06-15T12:03:40.000000Z'
                      updated_at: null
                  first_page_url: 'http://devot.test/api/expenses?page=1'
                  from: 1
                  last_page: 4
                  last_page_url: 'http://devot.test/api/expenses?page=4'
                  links:
                    -
                      url: null
                      label: '&laquo; Previous'
                      active: false
                    -
                      url: 'http://devot.test/api/expenses?page=1'
                      label: '1'
                      active: true
                    -
                      url: 'http://devot.test/api/expenses?page=2'
                      label: '2'
                      active: false
                    -
                      url: 'http://devot.test/api/expenses?page=3'
                      label: '3'
                      active: false
                    -
                      url: 'http://devot.test/api/expenses?page=4'
                      label: '4'
                      active: false
                    -
                      url: 'http://devot.test/api/expenses?page=2'
                      label: 'Next &raquo;'
                      active: false
                  next_page_url: 'http://devot.test/api/expenses?page=2'
                  path: 'http://devot.test/api/expenses'
                  per_page: 2
                  prev_page_url: null
                  to: 2
                  total: 7
                properties:
                  current_page:
                    type: integer
                    example: 1
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        user_id: 1
                        category_id: 1
                        description: 'Test description...'
                        amount: '196.00'
                        created_at: '2023-06-15T12:03:40.000000Z'
                        updated_at: null
                      -
                        id: 2
                        user_id: 1
                        category_id: 2
                        description: 'Test description...'
                        amount: '4893.00'
                        created_at: '2023-06-15T12:03:40.000000Z'
                        updated_at: null
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 1
                        category_id:
                          type: integer
                          example: 1
                        description:
                          type: string
                          example: 'Test description...'
                        amount:
                          type: string
                          example: '196.00'
                        created_at:
                          type: string
                          example: '2023-06-15T12:03:40.000000Z'
                        updated_at:
                          type: string
                          example: null
                  first_page_url:
                    type: string
                    example: 'http://devot.test/api/expenses?page=1'
                  from:
                    type: integer
                    example: 1
                  last_page:
                    type: integer
                    example: 4
                  last_page_url:
                    type: string
                    example: 'http://devot.test/api/expenses?page=4'
                  links:
                    type: array
                    example:
                      -
                        url: null
                        label: '&laquo; Previous'
                        active: false
                      -
                        url: 'http://devot.test/api/expenses?page=1'
                        label: '1'
                        active: true
                      -
                        url: 'http://devot.test/api/expenses?page=2'
                        label: '2'
                        active: false
                      -
                        url: 'http://devot.test/api/expenses?page=3'
                        label: '3'
                        active: false
                      -
                        url: 'http://devot.test/api/expenses?page=4'
                        label: '4'
                        active: false
                      -
                        url: 'http://devot.test/api/expenses?page=2'
                        label: 'Next &raquo;'
                        active: false
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          example: null
                        label:
                          type: string
                          example: '&laquo; Previous'
                        active:
                          type: boolean
                          example: false
                  next_page_url:
                    type: string
                    example: 'http://devot.test/api/expenses?page=2'
                  path:
                    type: string
                    example: 'http://devot.test/api/expenses'
                  per_page:
                    type: integer
                    example: 2
                  prev_page_url:
                    type: string
                    example: null
                  to:
                    type: integer
                    example: 2
                  total:
                    type: integer
                    example: 7
      tags:
        - 'Expense CRUD'
      security: []
    post:
      summary: 'Store new expense.'
      operationId: storeNewExpense
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Expense successfully stored.\",\n}"
      tags:
        - 'Expense CRUD'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: string
                  description: ''
                  example: cumque
                description:
                  type: string
                  description: 'Must be at least 8 characters. Must not be greater than 256 characters.'
                  example: 'Minus doloribus rerum sed.'
                amount:
                  type: string
                  description: ''
                  example: deleniti
              required:
                - category_id
                - description
                - amount
      security: []
  '/api/expenses/{id}':
    get:
      summary: 'Show single expense.'
      operationId: showSingleExpense
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 2
                  user_id: 1
                  category_id: 2
                  description: 'Test description...'
                  amount: '4893.00'
                  created_at: '2023-06-15T12:03:40.000000Z'
                  updated_at: null
                properties:
                  id:
                    type: integer
                    example: 2
                  user_id:
                    type: integer
                    example: 1
                  category_id:
                    type: integer
                    example: 2
                  description:
                    type: string
                    example: 'Test description...'
                  amount:
                    type: string
                    example: '4893.00'
                  created_at:
                    type: string
                    example: '2023-06-15T12:03:40.000000Z'
                  updated_at:
                    type: string
                    example: null
      tags:
        - 'Expense CRUD'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expense:
                  type: string
                  description: ''
                  example: cupiditate
              required:
                - expense
      security: []
    put:
      summary: 'Update an expense.'
      operationId: updateAnExpense
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Expense successfully updated.\",\n}"
      tags:
        - 'Expense CRUD'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expense:
                  type: string
                  description: ''
                  example: quae
                category_id:
                  type: string
                  description: ''
                  example: null
                description:
                  type: string
                  description: 'Must be at least 8 characters. Must not be greater than 256 characters.'
                  example: 'In temporibus quibusdam aliquam rerum quos nihil sequi id.'
              required:
                - expense
      security: []
    delete:
      summary: 'Delete an expense.'
      operationId: deleteAnExpense
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Expense successfully deleted.\",\n}"
      tags:
        - 'Expense CRUD'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expense:
                  type: string
                  description: ''
                  example: et
              required:
                - expense
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the expense.'
        example: sint
        required: true
        schema:
          type: string
  '/api/expenses/aggregate/{term}':
    get:
      summary: 'Get aggregate expenses.'
      operationId: getAggregateExpenses
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"34602.00\",\n}"
      tags:
        - 'Expense CRUD'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                term:
                  type: string
                  description: 'Must be one of <code>last_month</code>, <code>last_quarter</code>, <code>last_year</code>, or <code>this_year</code>.'
                  example: last_month
              required:
                - term
      security: []
    parameters:
      -
        in: path
        name: term
        description: ''
        example: sequi
        required: true
        schema:
          type: string
tags:
  -
    name: Authentication
    description: "\nAPI endpoints for managing authentication"
  -
    name: 'Category CRUD'
    description: "\nAPI endpoints for managing Category CRUD operations"
  -
    name: Endpoints
    description: ''
  -
    name: 'Expense CRUD'
    description: "\nAPI endpoints for managing Expense CRUD operations"
